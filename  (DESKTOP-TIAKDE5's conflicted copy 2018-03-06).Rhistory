setwd(Sys.getenv("masters-thesis")) # generalize
Sys.getenv("masters-thesis")
setwd(Sys.getenv("masters-thesis")) # generalize
Sys.getenv("masters-thesis")
setwd(Sys.getenv("masters-thesis"))
source("Kernels/kernels.R")
source("Estimation/estimates.R")
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.1
sig2 <- sig^2
omega2 <- 1
omega <- 1
ksq <- 0.5 # K2
hd <- 0.01 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega))
x <- cumsum(x)
y <- x + eps
plot(x[1:100],type="l")
plot(y[1:100],type = "l")
N <- 5000
mu <- numeric(N)
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 10sec
{
#simulate brownian motion
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
#put in data.frame for use in est.mu function
dataX<-data.frame(time = t*dt, Y = x)
mu[i] <- est.mu(dataX, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu <- sqrt(hd)*mu #This should be N(0,ksq*omega^2) distributed from eq. (13)
mu_normal <- mu*sqrt(1/(ksq*sig2))
mean(mu_normal)
var(mu_normal)
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
dataX<-data.frame(time = t*dt, Y = x)
sigma_1000_times <-est.sigma.raw(data = dataX, hv, kern.leftexp, t.index = seq(1000, 10000, by = 10))$sigRaw
est_sig2 <- sigma_1000_times^2
plot(est_sig2)
abline(1, 0)
abline(0.01, 1)
abline(0, 0.01)
abline 0.01, 0)
abline (0.01, 0)
plot(est_sig2)
abline (0.01, 0)
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
mu_normal <- sqrt(1/(ksq*sig2))*mu_
mean(mu_normal)
var(mu_normal)
plot(mu_normal)
mu_normal <- sqrt(1/(ksq*omega^2))*mu_
mean(mu_normal)
var(mu_normal)
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
mu_normal <- sqrt(1/(ksq*omega^2))*mu_
mean(mu_normal)
var(mu_normal)
sqrt(hd)
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
mu_normal <- sqrt(1/(ksq*sig2))*mu_
mean(mu_normal)
var(mu_normal)
plot(mu_normal)
qqnorm(mu_normal)
#Simulate the BM
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
#Put in dataframe
dataX<-data.frame(time = t*dt, Y = x)
#Get sigma estimates on 1000 different time_points (vigtigt at bandwidth er rigtig lille)
sigma_1000_times <-est.sigma(data = dataX, hv, kern.leftexp, t.index = seq(1000, 10000, by = 10))$sigRaw
est_sig2 <- sigma_1000_times^2
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
#Put in dataframe
dataX<-data.frame(time = t*dt, Y = x)
#Get sigma estimates on 1000 different time_points (vigtigt at bandwidth er rigtig lille)
sigma_1000_times <-est.sigma(data = dataX, hv, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10))$sigRaw
est_sig2 <- sigma_1000_times
plot(est_sig2)
hv
sigma_1000_times <-est.sigma.raw(data = dataX, hv, kern.leftexp, t.index = seq(1000, 10000, by = 10))$sigRaw
est_sig2 <- sigma_1000_times^2
sigma_1000_times <-est.sigma(data = dataX, hv, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10))$sig
est_sig2 <- sigma_1000_times
plot(est_sig2)
est_omega <- sqrt(dt)*sqrt(sigma_1000_times) #This should converge to K_2 * E(delta_eps^2) = K_2*2*E(eps^2) = K_2*2*omega2
est_omega
est_one <- est_omega/(2*ksq*omega2) #This should converge in probability to 1
est_one
omega2
ta<-100
ta=50
print(ta)
# parameters
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.1
sig2 <- sig^2
omega2 <- 1
omega <- 1
ksq <- 0.5 # K2
hd <- 0.01 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
#Simulate the BM
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
#Put in dataframe
dataX<-data.frame(time = t*dt, Y = x)
#Get sigma estimates on 1000 different time_points (vigtigt at bandwidth er rigtig lille)
sigma_1000_times <-est.sigma(data = dataX, hv, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10))$sig
est_sig2 <- sigma_1000_times
est_omega <- sqrt(dt)*sqrt(sigma_1000_times)
est_sig2
plot(est_sig2)
abline(0,sig2)
abline(sig2,0)
abline(sig2,0)
plot(est_sig2-sig2)
plot(est_sig2)
sig2
sigma_1000_times <-est.sigma(data = dataX, hv, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10), lag = 0)$sig
est_sig2 <- sigma_1000_times
plot(est_sig2)
sig2
sigma_1000_times <-est.sigma(data = dataX, 0.01, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10), lag = 0)$sig
est_sig2 <- sigma_1000_times
plot(est_sig2)
sigma_1000_times <-est.sigma(data = dataX, 0.1, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10), lag = 0)$sig
est_sig2 <- sigma_1000_times
plot(est_sig2)
sig2
sigma_1000_times <-est.sigma(data = dataX, 0.5, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10), lag = 0)$sig
est_sig2 <- sigma_1000_times
plot(est_sig2)
sigma_1000_times <-est.sigma(data = dataX, 0.9, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10), lag = 0)$sig
est_sig2 <- sigma_1000_times
plot(est_sig2)
sigma_1000_times <-est.sigma(data = dataX, 0.05, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10), lag = 0)$sig
est_sig2 <- sigma_1000_times
plot(est_sig2)
sigma_1000_times <-est.sigma(data = dataX, 0.0005, kern.leftexp, kern.parzen, t.index = seq(1000, 10000, by = 10), lag = 0)$sig
est_sig2 <- sigma_1000_times
plot(est_sig2)
sig <- 0.1
sig2 <- sig^2
omega <- 0.01
omega2 <- omega^2
ksq <- 0.5 # K2
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.1
sig2 <- sig^2
omega <- 1
sig <- 0.5
sig2 <- sig^2
omega <- 0.1
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.01 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
mean(mu_normal)
var(mu_normal)
plot(mu_normal)
omega^2
# parameters
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.1
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
#Normalize
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
#test - it all looks really fine
mean(mu_normal)
var(mu_normal)
omega^2
plot(mu_normal)
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 1
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
#Normalize
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
#test - it all looks really fine
mean(mu_normal)
var(mu_normal)
0.001113102
omega^2
omega^2
omega <- 0.1
omega^2
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.1
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
#Normalize
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
#test - it all looks really fine
mean(mu_normal)
var(mu_normal)
omega^2
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.1
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
#Normalize
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
#test - it all looks really fine
mean(mu_normal)
var(mu_normal)
dt
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.01
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
#Normalize
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
#test - it all looks really fine
mean(mu_normal)
var(mu_normal)
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.01
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
#Normalize
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
#test - it all looks really fine
mean(mu_normal)
var(mu_normal)
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.001
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
#Normalize
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
#test - it all looks really fine
mean(mu_normal)
var(mu_normal)
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.01
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
#Normalize
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
#test - it all looks really fine
mean(mu_normal)
var(mu_normal)
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.01
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N) #Takes approx 30sec
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt/2) #This should be N(0,ksq*omega^2) distributed from theorem 5
var(mu_)
mu_ <- sqrt(hd)*mu *sqrt(dt) #This should be N(0,ksq*omega^2) distributed from theorem 5
mat <- 1
t <- 0:10000  # time_points
dt <- mat/t[length(t)]
sig <- 0.5
sig2 <- sig^2
omega <- 0.01
omega2 <- omega^2
ksq <- 0.5 # K2
hd <- 0.1 #bandwidth in mu
hv <- 0.05 #bandwidth in sigma
N <- 5000
mu <- numeric(N)
for(i in 1:N)
{
#simulate brownian motion with noise
x <- rnorm(n = length(t) , mean = 0, sd = sqrt(sig2*dt))
x <- cumsum(x)
eps <- rnorm(length(t), mean = 0, sd = sqrt(omega2))
y <- x + eps
#put in data.frame for use in est.mu function
dataY<-data.frame(time = t*dt, Y = y)
mu[i] <- est.mu(dataY, hd, kern.leftexp, t.index = 500)$mu[1] #Take out a random timeindex (500)
}
mu_ <- sqrt(hd)*mu *sqrt(dt) #This should be N(0,ksq*omega^2) distributed from theorem 5
var(mu_)
mu_normal <- sqrt(1/(ksq*2*omega^2))*mu_
mean(mu_normal)
var(mu_normal)
