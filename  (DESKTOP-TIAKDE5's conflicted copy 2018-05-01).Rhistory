x<-matrix(c(0,2,1,-1,3,0,2,5,0), ncol = 3, nrow = 3, byrow = T)
y<-c(1,2,1)
library(optR)
Z<-optR(x,y, method = "gauss")
Z
x<-matrix(c(0,2,1,-1,3,0,2,5,0), ncol = 3, nrow = 3, byrow = T)
y<-c(1,2,1)
library(optR)
Z<-optR(x,y, method = "gauss")
-1/8 - 3/8*(1.3636)
0.625 - 1/8*(1.3636)
Z
x<-matrix(c(0,2,1,-1,3,0,2,5,0), ncol = 3, nrow = 3, byrow = T)
x
x<-matrix(c(0,2,1,0,3,0,2,5,0), ncol = 3, nrow = 3, byrow = T)
y<-c(1,2,1)
library(optR)
Z<-optR(x,y, method = "gauss")
Z
x
x<-matrix(c(3,2,1,0,3,0,0,5,0), ncol = 3, nrow = 3, byrow = T)
Z<-optR(x,y, method = "gauss")
Z
x
x<-matrix(c(0,2,1,0,3,0,0,5,0), ncol = 3, nrow = 3, byrow = T)
x
x<-matrix(c(0,2,1,0,3,0,2,5,0), ncol = 3, nrow = 3, byrow = T)
x
Z
x<-matrix(c(0,2,1,0,3,0,2,5,0), ncol = 3, nrow = 3, byrow = T)
x
Z<-optR(x,y, method = "gauss")
Z
x<-matrix(c(0,2,1,0,3,0,2,5,0), ncol = 3, nrow = 3, byrow = T)
lm(x)
lm(Y~X-1,x)
(7*22)/(5*5)
(16*30)/(9*17)
(10*8)/(10*2)
x.cor <- ACF(x, 1)
library(nlme)
x.cor <- ACF(x, 1)
library(nlme)
set.seed(2343)
x<-rep(0,1000)
Z<-rt(1000, 10)
for(i in 2:1000){
x[i] = 0.9*x[i-1]+Z[i]
}
plot(x, type='l')
x.acf<-acf(x, 20)
x2 <- sample(x, 1000)
plot(x2, type = 'l')
x2.acf<-acf(x2,20)
x.cor <- ACF(x, 1)
x.model <- arima(x, c(1, 0, 0))
x.model
plot(x.model)
x.acf<-acf(x, 20)
x.cor <- ACF(x.model, 1)
x.cor <- ACF(x.model$series, 1)
x.cor <- ACF(x.model$model, 1)
x.cor <- ACF(x, 1)
x.cor <- ccf(x, x)
x.cor <- acf(x, 1)
x.cor <- acf(x, 1, plot="false")
x.cor <- acf(x, 1, plot=false)
x.cor <- acf(x, 1, plot=FALSE)
x.cor
x.cor <- acf(x, 2, plot=FALSE)
x.cor
x.cor <- x.acf$lag
x.cor
x.cor <- x.acf$acf
x.cor
x.corr <- x.acf$acf
x.cov <- acf(x, 1, type = "covariance")
x.cov <- acf(x, 1, type = "covariance", plot = FALSE)
x.cov
x.cov <- acf(x, 0, type = "covariance", plot = FALSE)
x.cov
x.model <- arima(x, c(1, 0, 0))
x.model
x.acf<-acf(x, 20)
x.acf
x.cov <- acf(x, 0, type = "covariance", plot = FALSE)
x.cov
x.cov$acf
x.cov$acf[1]
x.cov$acf[1]*(1-0.9013^2)
x.acf
sighat <- x.cov$acf[1]*(1-0.9013^2)
sigsqhat <- x.cov$acf[1]*(1-0.9013^2)
sigsqhat
sigsqhat/x.cov$acf[1]
confint(x)
G<-factor(c("Women", "Men"))
Obesity <- factor(c("Yes", "No"))
Death <- factor(c("Yes", "No"))
Gender<-factor(c("Women", "Men"))
Obesity <- factor(c("Yes", "No"))
Death <- factor(c("Yes", "No"))
obese <- expand.grid(Death = Death, Obesity = Obesity, Gender = Gender)
obese
obese$freq <- c(16, 2045, 7, 1044, 22, 1179, 22, 1409)
(obese)
obese$prob <- c(obese$freq[1]/(obese$freq[1:2]))
obese
obese$prob <- c(obese$freq[1]/sum(obese$freq[1:2]))
(obese)
(obese)
ls[]
ls(rm=ls())
Gender<-factor(c("Women", "Men"))
Obesity <- factor(c("Yes", "No"))
Death <- factor(c("Yes", "No"))
obese <- expand.grid(Death = Death, Obesity = Obesity, Gender = Gender)
obese$freq <- c(16, 2045, 7, 1044, 22, 1179, 22, 1409)
(obese)
chisq.test(obese)
obesetab = xtabs(obese)
obesetab <- xtabs(obese)
obesetab <- xtabs(freq ~ ., data = obese)
obesetab
ftable(obesetab, row.vars = "Obesity", col.vars = "Death")
ftable(obesetab$Men, row.vars = "Death", col.vars = "Death")
ftable(obesetab[Men], row.vars = "Death", col.vars = "Death")
ftable(obesetab["Men",,], row.vars = "Death", col.vars = "Death")
chisq.test(obesetab)
chisq.test(obesetab)
obesetab
chisq.test(obesetab[,,"Men"])
tis<-chisq.test(obesetab[,,"Men"])
tis.fitted
tis$parameter
tis$expected
library(knitr)
obese <- expand.grid(Treat = Treat, Healed = Healed, Gender = Gender)
Gender<-factor(c("Women", "Men"))
Treat <- factor(c("Thali", "Placebo"))
Healed <- factor(c("Yes", "No"))
obese <- expand.grid(Treat = Treat, Healed = Healed, Gender = Gender)
study <- expand.grid(Treat = Treat, Healed = Healed, Gender = Gender)
study
study$freq <- c(14, 9, 1, 21)
study
Treat <- factor(c("Thali", "Placebo"))
Healed <- factor(c("Yes", "No"))
study <- expand.grid(Treat = Treat, Healed = Healed)
study$freq <- c(14, 9, 1, 21)
study
study$freq <- c(14, 1, 9, 21)
study
study$prob <- c(14/23, 1/22, 9/23, 21/22)
study
rmultinom(100, 23, c(14/23, 9/23))
rmultinom(100, 23, c(14/23, 1/22))
rmultinom(100, 23, c(14/23, 9/23))
rmultinom(100000, 23, c(14/23, 9/23))
rmultinom(100, 23, c(14/23, 9/23))
rmultinom(1000, 23, c(14/23, 9/23))
rmultinom(1000, 23, c(14/23, 9/23))[100]
rmultinom(1000, 23, c(14/23, 9/23))[100,]
rmultinom(1000, 23, c(14/23, 9/23))[,]
rmultinom(1000, 23, c(14/23, 9/23))[,1]
rmultinom(100, 23, c(14/23, 9/23))[,1]
rmultinom(100, 23, c(14/23, 9/23))#[,1]
rmultinom(100, 23, c(14/23, 9/23))[1,]
rmultinom(100, 23, c(14/23, 9/23))[,1]
rmultinom(100, 23, c(14/23, 9/23))#[,1]
rmultinom(100, 23, c(14/23, 9/23))[1,1]
rmultinom(100, 23, c(14/23, 9/23))[1,1]
Gender<-factor(c("Women", "Men"))
Obesity <- factor(c("Yes", "No"))
Death <- factor(c("Yes", "No"))
obese <- expand.grid(Death = Death, Obesity = Obesity, Gender = Gender)
(obese)
Treat <- factor(c("Thali", "Placebo"))
Healed <- factor(c("Yes", "No"))
study <- expand.grid(Treat = Treat, Healed = Healed)
study$freq <- c(14, 1, 9, 21)
study$prob <- c(14/23, 1/22, 9/23, 21/22)
study
source('C:/Users/Frederik/Desktop/compfin/h3source.R')
source('C:/Users/Frederik/Desktop/compfin/handin.R')
source('C:/Users/Frederik/Downloads/Chrome/QRM2.R')
source('C:/Users/Frederik/Downloads/Chrome/QRM2.R')
VaR.G = LG.sort[VaRindex]
plot(LG)
density(LG)
plot(density(LG))
plot(density(LC))
plot(density(LG))
plot(density(LC))
plot(density(LC))
plot(density(LG))
source('C:/Users/Frederik/Downloads/Chrome/QRM2.R')
source('C:/Users/Frederik/Downloads/Chrome/QRM2.R')
source('C:/Users/Frederik/Downloads/Chrome/QRM2.R')
source('C:/Users/Frederik/Downloads/Chrome/QRM2.R')
mfrow(par(c(1,2)))
x <- data.frame(LC, LG)
library(ggplot2);library(reshape2)
data<- melt(x)
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25)
ggplot(data,aes(x=value, fill=variable)) + geom_histogram(alpha=0.25)
ggplot(data,aes(x=variable, y=value, fill=variable)) + geom_boxplot()
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25)
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.55)
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + ylim(c(0,0.005))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(0,100))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(-100,100))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(-200,200))
plot(density(LG))
plot(density(LC))
density(LG)
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0) + xlim(c(-200,200))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.01) + xlim(c(-200,200))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(-200,200))
x <- data.frame(density(LC), density(LG))
plot(density(LG))
plot(density(LC))
plot(density(LG))
plot(density(LC))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(-200,200))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(-200,500))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(-0,500))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(-0,300))
x <- data.frame(Clayton=LC, Gaussian=LG)
library(ggplot2);library(reshape2)
data<- melt(x)
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(-0,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(1,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(200,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.5) + xlim(c(200,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.05) + xlim(c(200,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(200,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(100,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.15) + xlim(c(100,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.0) + xlim(c(100,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.1) + xlim(c(100,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.9) + xlim(c(100,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(100,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(200,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(200,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(250,300))
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(100,300))
source('C:/Users/Frederik/Downloads/Chrome/QRM2.R')
ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.25) + xlim(c(100,300))
kappa = 5
theta = 0.0225
xi = 0.4
rho = -0.5
spot = 1
N = 100
mat = 100
steps = 1000
dt = mat/steps
X = matrix(nrow = N, ncol = mat)
Y = matrix(nrow = N, ncol = mat)
#vol = matrix(nrow = N, ncol = mat) #matrix if we want to save values along the way
vol = 1:N*0
vol
vol = 1:N*0+1
log(vol)
vol = rgamma(N, 2*kappa*theta*xi^(-2), 2*kappa*xi^(-2))
vol = exp(   log(vol)+1/vol(kappa*(theta-vol)-1/2*xi^2)   )
vol = exp(   log(vol)+1/vol*(kappa*(theta-vol)-1/2*xi^2)   )
vol
(1/(1:5)*(5))
kappa = 5
theta = 0.0225
xi = 0.4        ##vol of vol
rho = -0.5
spot = 1
N = 100
mat = 100
steps = 1000
dt = mat/steps
X = matrix(nrow = N, ncol = mat)
Y = matrix(nrow = N, ncol = mat)
#vol = matrix(nrow = N, ncol = mat) #matrix if we want to save values along the way
vol = rgamma(N, 2*kappa*theta*xi^(-2), 2*kappa*xi^(-2))
# -- finkont2 lognormal scheme --
NS = rnorm(N, 0, 1)
NV = rho*NS + sqrt(1-rho^2)*rnorm(N,0,1)
X = exp(    log(X) - 1/2*vol*dt + sqrt(vol)*dt*NS   )
vol = exp(   log(vol)+1/vol*(kappa*(theta-vol)-1/2*xi^2)   )*dt + xi*1/sqrt(vol)*sqrt(dt)*NV
x
X
X[, 1] = spot
vol[, 1] = startvol
startvol = rgamma(N, 2*kappa*theta*xi^(-2), 2*kappa*xi^(-2))
vol[, 1] = startvol
vol[,1]
# Heston simulation test
kappa = 5
theta = 0.0225
xi = 0.4        ##vol of vol
rho = -0.5
spot = 1
N = 100
mat = 100
steps = 1000
dt = mat/steps
X = matrix(nrow = N, ncol = mat)
Y = matrix(nrow = N, ncol = mat)
vol = matrix(nrow = N, ncol = mat) #matrix if we want to save values along the way
startvol = rgamma(N, 2*kappa*theta*xi^(-2), 2*kappa*xi^(-2))
X[, 1] = spot
vol[, 1] = startvol
# -- finkont2 lognormal scheme --
NS = rnorm(N, 0, 1)
NV = rho*NS + sqrt(1-rho^2)*rnorm(N,0,1)
X = exp(    log(X) - 1/2*vol*dt + sqrt(vol)*dt*NS   )
vol = exp(   log(vol)+1/vol*(kappa*(theta-vol)-1/2*xi^2)   )*dt + xi*1/sqrt(vol)*sqrt(dt)*NV
X
vol
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
X
vol*vol
vol*vol
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
vol
kappa = 5
theta = 0.0225
xi = 0.4        ##vol of vol
rho = -0.5
spot = 1
N = 1000
mat = 100
steps = 1000
dt = mat/steps
#noise
gamma = 0.5
X = matrix(nrow = N, ncol = mat)
Y = matrix(nrow = N, ncol = mat)
vol = matrix(nrow = N, ncol = mat) #matrix if we want to save values along the way
vol
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
omega
vol[,1]
omega = gamma*vol[,i]/sqrt(steps)
omega
gamma
gamma*vol[,2]
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
Y
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
warnings()
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
warnings()
vol
dim(vol)
# Heston simulation test
kappa = 5
theta = 0.0225
xi = 0.4        ##vol of vol
rho = -0.5
spot = 1
N = 1000
mat = 100
steps = 1000
dt = mat/steps
#noise
gamma = 0.5
X = matrix(nrow = N, ncol = steps)
Y = matrix(nrow = N, ncol = steps)
vol = matrix(nrow = N, ncol = steps) #matrix if we want to save values along the way
startvol = rgamma(N, 2*kappa*theta*xi^(-2), 2*kappa*xi^(-2))
X[, 1] = spot
vol[, 1] = startvol
Y[, 1] = X[,1] + rnorm(N, 0, gamma*vol[,1]/sqrt(steps)) #n corresponds to steps and not repetitions N?
#            -- finkont2 lognormal scheme --
#    (slightly different model setup /lognormal scheme)
#                       (eller)
# http://www.homepages.ucl.ac.uk/~ucahgon/Heston.pdf slide 9
i = 2
NS = rnorm(N, 0, 1)
NV = rho*NS + sqrt(1-rho^2)*rnorm(N,0,1)
X[,i] =   exp(  log(X[,i-1]) - 1/2*vol[,i-1]*dt + sqrt(vol[,i-1])*dt*NS   )
vol[,i] = exp(  log(vol[,i-1])+1/vol[,i-1]*(kappa*(theta-vol[,i-1])-1/2*xi^2)   )*dt + xi*1/sqrt(vol[,i-1])*sqrt(dt)*NV
#Observed Y
omega = gamma*vol[,i]/sqrt(steps)     #n corresponds to steps and not repetitions N? #should vol be i-1? No?
Y[,i] = X[,i] + rnorm(N, 0, omega)
vol
vol[1,]
omega = gamma*vol[,i]/sqrt(steps)     #n corresponds to steps and not repetitions N? #should vol be i-1? No?
omega
Y[,i] = X[,i] + rnorm(N, 0, omega)
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
warnings()
kappa = 5
theta = 0.0225
xi = 0.4        ##vol of vol
rho = -0.5
spot = 1
N = 1000
mat = 100
steps = 1000
dt = mat/steps
#noise
gamma = 0.5
X = matrix(nrow = N, ncol = steps)
Y = matrix(nrow = N, ncol = steps)
vol = matrix(nrow = N, ncol = steps) #matrix if we want to save values along the way
startvol = rgamma(N, 2*kappa*theta*xi^(-2), 2*kappa*xi^(-2))
X[, 1] = spot
vol[, 1] = startvol
Y[, 1] = X[,1] + gamma*vol[,1]/sqrt(steps)*rnorm(N, 0, 1) #n corresponds to steps and not repetitions N?
i=2
NS = rnorm(N, 0, 1)
NV = rho*NS + sqrt(1-rho^2)*rnorm(N,0,1)
X[,i] =   exp(  log(X[,i-1]) - 1/2*vol[,i-1]*dt + sqrt(vol[,i-1])*dt*NS   )
vol[,i] = exp(  log(vol[,i-1])+1/vol[,i-1]*(kappa*(theta-vol[,i-1])-1/2*xi^2)   )*dt + xi*1/sqrt(vol[,i-1])*sqrt(dt)*NV
omega = gamma*vol[,i]/sqrt(steps)     #n corresponds to steps and not repetitions N? #should vol be i-1? No?
Y[,i] = X[,i] + omega * rnorm(N, 0, 1)
y
Y
i = 3
NS = rnorm(N, 0, 1)
NV = rho*NS + sqrt(1-rho^2)*rnorm(N,0,1)
X[,i] =   exp(  log(X[,i-1]) - 1/2*vol[,i-1]*dt + sqrt(vol[,i-1])*dt*NS   )
vol[,i] = exp(  log(vol[,i-1])+1/vol[,i-1]*(kappa*(theta-vol[,i-1])-1/2*xi^2)   )*dt + xi*1/sqrt(vol[,i-1])*sqrt(dt)*NV
#Observed Y
omega = gamma*vol[,i]/sqrt(steps)     #n corresponds to steps and not repetitions N? #should vol be i-1? No?
Y[,i] = X[,i] + omega * rnorm(N, 0, 1)
vol
vol[1,]
head(vol)
log(-1)
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
warnings()
rgamma(N, 2*kappa*theta*xi^(-2), 2*kappa*xi^(-2))
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
source('C:/Users/Frederik/Desktop/Lspeciale/Simulation.R')
Y
plot(Y[1:4,])
plot(Y[1,])
Y[1,]
plot(Y[1,])
omega
sqrt(steps)
plot(vol[1,])
Sys.getenv("masters-thesis")
afvigelse<-function(teoretisk, obs){
print(abs(teoretisk-obs)/teoretisk)
}
afvigelse(18.09, 23.55)
afvigelse(18.09, 23.55)
afvigelse<-function(teoretisk, obs){
print("jaokay, lol")
return(abs(teoretisk-obs)/teoretisk)
}
afvigelse(18.09, 23.55)
test <- list(time = 1:100, Y = rnorm(100, 0, 1))
length(test$time)/freq
test <- list(time = 1:100, Y = rnorm(100, 0, 1))
freq = 30
overlap = F
length(test$time)/freq
floor(length(test$time)/freq)
times <- floor(length(test$time)/freq)
data <- list(time = 1:100, Y = rnorm(100, 0, 1))
freq = 30
overlap = F
times <- floor(length(data$time)/freq)
est.preAverage<-function(data, t.index, freq, overlap = F, width = 0){
if(missing(t.index)){
}
else{
}
}
data <- list(time = 1:100, Y = rnorm(100, 0, 1))
freq = 30
overlap = F
times <- floor(length(data$time)/freq)
seq(from = length(data$time)-(times*freq), to = length(data$time) , by=freq )
t.index <- c(10, 30, 50, 90)
getwd()
setwd(Sys.getenv("masters-thesis"))
source("simulation/heston.R")
source("simulation/bursts.R")
source("estimation/estimates.R")
source("estimation/rho.R")
source("estimation/teststat.R")
source("estimation/pre-average.R")
source("kernels/kernels.R")
source("SPY/datafunctions.R")
# IMPORT REAL DATA
fullData<-readRDS(paste0(Sys.getenv("masters-thesis-data"),"/SPY/2014_SPY_Vol_Avg.rds"))
firstDay<-selectDays(fullData, as.Date("2014-06-05"), nDays = 2)
firstDay$Date
firstDay$DateTime
firstDay$Time
plot(firstDay$Time, type = "l")
firstDay<-selectDays(fullData, as.Date("2014-06-05"), nDays = 3)
plot(firstDay$Time, type = "l")
require(microbenchmark)
benchmark(exp(10/2), exp(10000000000/2))
microbenchmark(exp(10/2), exp(10000000000/2))
microbenchmark(exp(1:100*10/2), exp(1:100*10000000000/2))
microbenchmark(exp(1:100*10/7), exp(1:100*10000000000/7))
microbenchmark(exp(1:100 * 0.5 / 2),exp(1:100*10/7), exp(1:100*10000000000/7))
52*7*24**60*60*1000
52*7*24*60*60*1000
unit
unit<- 52*7*24*60*60*1000
unit
firstDay$Time/unit
plot(firstDay$Time/unit, type = "l")
